datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * ----------> ALL ENUM HERE <----------
 */
enum ROLE {
  SUPER_ADMIN
  ADMIN
  TEACHER
  STUDENT
}

enum SECTION {
  A
  B
  C
  D
  E
  NA
}

enum GROUP {
  SCIENCE
  COMMERCE
  ARTS
  NA
}

enum CURRICULUM {
  NATIONAL
  BRITISH
}

enum CURRICULUM_VERSION {
  ENGLISH
  BENGAL
}

/**
 * ----------> ALL DB Model Here <----------
 */

model User {
  id                 String   @id @map("_id")
  password           String
  role               ROLE
  hasPasswordChanged Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  Student Student[]
  Teacher Teacher[]
  Admin   Admin[]

  @@map("users")
}

model Admin {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique
  name       String
  email      String   @unique
  phone      String   @unique
  fatherName String
  motherName String
  dob        DateTime
  position   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relational fields
  user User @relation(fields: [userId], references: [id])

  @@map("admins")
}

model Student {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique
  classId    String   @db.ObjectId
  name       String
  email      String   @unique
  phone      String   @unique
  fatherName String
  motherName String
  dob        DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relational fields
  user  User  @relation(fields: [userId], references: [id])
  class Class @relation(fields: [classId], references: [id])

  @@map("students")
}

model Teacher {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String           @unique
  name           String
  email          String           @unique
  phone          String           @unique
  fatherName     String
  motherName     String
  dob            DateTime
  qualifications String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  TeacherSubject TeacherSubject[]

  // relational fields
  user User @relation(fields: [userId], references: [id])

  @@map("teachers")
}

model Class {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  name              String             @unique // CLASS{Grade}-{Section}-{Group}
  grade             Int
  curriculum        CURRICULUM         @default(NATIONAL)
  curriculumVersion CURRICULUM_VERSION @default(BENGAL)
  section           SECTION            @default(NA)
  group             GROUP              @default(NA)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  Student Student[]
  Subject Subject[]

  @@map("classes")
}

model Subject {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  classId     String   @db.ObjectId
  name        String
  subjectCode String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  TeacherSubject TeacherSubject[]

  // relational fields
  class Class @relation(fields: [classId], references: [id])

  @@map("subject")
}

model TeacherSubject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String   @db.ObjectId
  subjectId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relational fields
  teacher Teacher @relation(fields: [teacherId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@map("teacherSubjects")
}
